## COMMON ##
if(APPLE)
    find_library(coreFoundation CoreFoundation)
    set(PLATFORM_TARGET_LIBS ${coreFoundation})
elseif(MINGW) # Should this check for WIN32?
    set(PLATFORM_TARGET_LIBS libopengl32.a imm32.lib)
elseif(UNIX)
    set(PLATFORM_TARGET_LIBS ) # Emply for now
else()
    message(WARNING
            "Make sure you set `PLATFORM_TARGET_LIBS` for your platform. \
          See:  ${CMAKE_CURRENT_LIST_FILE}")
endif()

## imgui ##
execute_process(
	COMMAND git submodule update --init src/imgui
	WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
)
add_definitions("-DImDrawIdx=unsigned int") # short is not enough for us
add_library(imgui STATIC imgui/imgui.cpp imgui/imgui_draw.cpp)
target_link_libraries(imgui ${PLATFORM_TARGET_LIBS})
#install(TARGETS imgui DESTINATION ${INSTALL_ARCHIVE_DIR}) # No need to install a static lib

## JSON11 ##
execute_process(
	COMMAND git submodule update --init src/json11
	WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
)
add_library(json11 STATIC json11/json11.cpp)
#target_include_directories(json11 ${CMAKE_CURRENT_SOURCE_DIR}/json11)
target_compile_options(json11
	PUBLIC -std=c++11
	PRIVATE -fno-rtti -fno-exceptions -Wall -Wextra -Werror)

#install(TARGETS json11 DESTINATION ${INSTALL_ARCHIVE_DIR})

## utf8.h ##
execute_process(
	COMMAND git submodule update --init src/utf8
	WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
)

## zlib ##
find_package(ZLIB)
if(NOT ZLIB_FOUND)
	execute_process(
		COMMAND git submodule update --init src/zlib
		WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
	)
	set(SKIP_INSTALL_FILES YES)
	set(SKIP_INSTALL_HEADERS NO)
	add_subdirectory(zlib)

	if(WIN32)
		set(ZLIB_LIBRARIES zlibstatic CACHE INTERNAL "zlib library")
	else()
		set(ZLIB_LIBRARIES z CACHE INTERNAL "zlib library")
	endif()
	set(ZLIB_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/zlib)
endif()

## SQLite3 ##
find_package(SQLite3)
if(NOT SQLITE3_FOUND)
	add_subdirectory(sqlite3)
endif()

## glad ##
execute_process(
	COMMAND git submodule update --init src/glad
	WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
)
set(GLAD_PROFILE "compatibility" CACHE STRING "GL Profile" FORCE) # Using OpenGL Compatibility profile (for enabling use of fixed-function pipeline)
set(GLAD_API "gl=3.2,gles2=2.0" CACHE STRING "GL versions" FORCE) # Build for OpenGL 3.2 and OpenGLES 2
set(GLAD_EXTENSIONS "GL_EXT_texture_compression_s3tc,GL_OES_element_index_uint" CACHE STRING "Gl exts" FORCE) # S3TC used to load texture for pins â€” delete when removing support. The other is used by GLES2.
set(GLAD_NO_LOADER ON CACHE BOOL "Disable loader" FORCE) # We're using SDL2 loader
add_subdirectory(glad)

add_subdirectory(openboardview)
